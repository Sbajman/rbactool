<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RBAC RoleBinding Request</title>
    <style>
        .dropdown-container {
            position: relative;
            display: inline-block;
        }
        .dropdown-list {
            position: absolute;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
            background: white;
            width: 100%;
            display: none;
        }
        .dropdown-list div {
            padding: 5px;
            cursor: pointer;
        }
        .dropdown-list div:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>
    <h2>Request Access</h2>
    <form id="accessForm">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="namespace">Namespace:</label>
        <div class="dropdown-container">
            <input type="text" id="namespace" name="namespace" required autocomplete="on">
            <div id="namespaceList" class="dropdown-list"></div>
        </div>
        <br><br>

        <label for="duration">Duration:</label>
        </select>

        <label for="duration">Duration:</label>
        <input type="number" id="duration" min="1" required>
        
        <label for="unit">Unit:</label>
        <select id="unit" required>
            <option value="minutes">Minutes</option>
            <option value="hours">Hours</option>
        </select><br><br>

        <button type="submit">Request Access</button>
        <br><br>
        <button onclick="triggerCleanup()">Cleanup Expired RoleBindings</button>
    </form>

    <script>
        let namespaces = [];

        // Fetch namespaces from the backend
        function fetchNamespaces() {
        fetch('/namespaces')
            .then(response => response.json())
            .then(data => {
                const dropdown = document.getElementById('namespaceDropdown');
                dropdown.innerHTML = ''; // Clear previous options

                data.forEach(ns => {
                    if (!ns.endsWith('-prod')) {
                        let option = document.createElement('option');
                        option.value = ns;
                        option.textContent = ns;
                        dropdown.appendChild(option);
                    }
                });
            })
            .catch(error => console.error('Failed to fetch namespaces', error));
    }

    function validateNamespaceInput() {
        const selectedNamespace = document.getElementById('namespaceDropdown').value;
        const errorElement = document.getElementById('namespaceError');

        if (selectedNamespace.endsWith('-prod')) {
            errorElement.style.display = 'block';
        } else {
            errorElement.style.display = 'none';
        }
    }

    document.getElementById('namespaceDropdown').addEventListener('change', validateNamespaceInput);
    

        function triggerCleanup() {
            fetch('/cleanup', {
                method: 'POST', // POST request to manually trigger cleanup
            })
            .then(response => response.json())
            .then(data => alert('Cleanup completed: ' + data.message))
            .catch(error => alert('Failed to trigger cleanup'));
        }

        // document.getElementById('namespace').innerHTML = '<option value="default">default</option>';
        
        // async function loadNamespaces() {
        //     try {
        //         let response = await fetch('/namespaces');
        //         let namespaces = await response.json();

        //         let namespaceDropdown = document.getElementById('namespace');
        //         namespaceDropdown.innerHTML = ""; // Clear existing options

        //         namespaces.forEach(ns => {
        //             let option = document.createElement("option");
        //             option.value = ns;
        //             option.textContent = ns;
        //             namespaceDropdown.appendChild(option);
        //         });
        //     } catch (error) {
        //         console.error("Failed to load namespaces:", error);
        //     }
        // }

        // // Call the function on page load
        // document.addEventListener("DOMContentLoaded", loadNamespaces);

        // document.getElementById('namespace').addEventListener('input', function() {
        //     const input = this.value.toLowerCase();
        //     const listContainer = document.getElementById('namespaceList');
        //     listContainer.innerHTML = '';

        //     if (!input) {
        //         listContainer.style.display = 'none';
        //         return;
        //     }

        //     const filtered = namespaces.filter(ns => ns.toLowerCase().includes(input));
        //     filtered.forEach(ns => {
        //         const div = document.createElement('div');
        //         div.textContent = ns;
        //         div.onclick = function() {
        //             document.getElementById('namespace').value = ns;
        //             listContainer.style.display = 'none';
        //         };
        //         listContainer.appendChild(div);
        //     });

        //     listContainer.style.display = filtered.length ? 'block' : 'none';
        // });

        // document.addEventListener('click', function(event) {
        //     if (!event.target.closest('.dropdown-container')) {
        //         document.getElementById('namespaceList').style.display = 'none';
        //     }
        // });

        // Handle form submission
        document.getElementById('accessForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const username = document.getElementById('username').value;
            const namespace = document.getElementById('namespace').value;
            const durationValue = parseInt(document.getElementById('duration').value, 10);
            const unit = document.getElementById('unit').value;

            // Convert duration to minutes if unit is hours
            let durationInMinutes = durationValue;
            if (unit === 'hours') {
                durationInMinutes = durationValue * 60; // Convert hours to minutes
            }

            const requestData = { username, namespace, duration: durationInMinutes };

            // Send the data to the backend
            fetch('/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error: ' + data.error);
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Request failed:', error);
                alert('Failed to process request.');
            });
        });

        document.getElementById('cleanupButton').addEventListener('click', function() {
                fetch('/cleanup', { method: 'POST' }) 
                    .then(response => response.json())
                    .then(data => alert(data.message))
                    .catch(error => console.error('Error triggering cleanup:', error));
            });

        // Fetch namespaces on page load
        fetchNamespaces();
    </script>
</body>
</html>
